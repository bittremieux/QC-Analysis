#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Mon Sep 21 10:00:21 2015 by generateDS.py version 2.17a.
#
# Command line options:
#   ('-o', 'qcml.py')
#
# Command line arguments:
#   qcML_0.0.8.xsd
#
# Command line:
#   /usr/local/bin/generateDS.py -o "qcml.py" qcML_0.0.8.xsd
#
# Current working directory (os.getcwd()):
#   QC mining
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_


Validate_simpletypes_ = True


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class qcMLType(GeneratedsSuper):
    """The type of the root elementVersion number of qcML document. Pattern
    is \d+\.\d+\.\d+"""
    subclass = None
    superclass = None
    def __init__(self, version=None, runQuality=None, setQuality=None, cvList=None, embeddedStylesheetList=None):
        self.original_tagname_ = None
        self.version = _cast(None, version)
        if runQuality is None:
            self.runQuality = []
        else:
            self.runQuality = runQuality
        if setQuality is None:
            self.setQuality = []
        else:
            self.setQuality = setQuality
        self.cvList = cvList
        self.embeddedStylesheetList = embeddedStylesheetList
    def factory(*args_, **kwargs_):
        if qcMLType.subclass:
            return qcMLType.subclass(*args_, **kwargs_)
        else:
            return qcMLType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_runQuality(self): return self.runQuality
    def set_runQuality(self, runQuality): self.runQuality = runQuality
    def add_runQuality(self, value): self.runQuality.append(value)
    def insert_runQuality_at(self, index, value): self.runQuality.insert(index, value)
    def replace_runQuality_at(self, index, value): self.runQuality[index] = value
    def get_setQuality(self): return self.setQuality
    def set_setQuality(self, setQuality): self.setQuality = setQuality
    def add_setQuality(self, value): self.setQuality.append(value)
    def insert_setQuality_at(self, index, value): self.setQuality.insert(index, value)
    def replace_setQuality_at(self, index, value): self.setQuality[index] = value
    def get_cvList(self): return self.cvList
    def set_cvList(self, cvList): self.cvList = cvList
    def get_embeddedStylesheetList(self): return self.embeddedStylesheetList
    def set_embeddedStylesheetList(self, embeddedStylesheetList): self.embeddedStylesheetList = embeddedStylesheetList
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def hasContent_(self):
        if (
            self.runQuality or
            self.setQuality or
            self.cvList is not None or
            self.embeddedStylesheetList is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='qcMLType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<?xml-stylesheet type="text/xml" href="ss.xsl"?>%s' % (eol_, ))
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='qcMLType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='qcMLType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='qcMLType'):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='qcMLType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for runQuality_ in self.runQuality:
            runQuality_.export(outfile, level, namespace_, name_='runQuality', pretty_print=pretty_print)
        for setQuality_ in self.setQuality:
            setQuality_.export(outfile, level, namespace_, name_='setQuality', pretty_print=pretty_print)
        if self.cvList is not None:
            self.cvList.export(outfile, level, namespace_, name_='cvList', pretty_print=pretty_print)
        if self.embeddedStylesheetList is not None:
            self.embeddedStylesheetList.export(outfile, level, namespace_, name_='embeddedStylesheetList', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'runQuality':
            obj_ = RunQualityAssessmentType.factory()
            obj_.build(child_)
            self.runQuality.append(obj_)
            obj_.original_tagname_ = 'runQuality'
        elif nodeName_ == 'setQuality':
            obj_ = SetQualityAssessmentType.factory()
            obj_.build(child_)
            self.setQuality.append(obj_)
            obj_.original_tagname_ = 'setQuality'
        elif nodeName_ == 'cvList':
            obj_ = CVListType.factory()
            obj_.build(child_)
            self.cvList = obj_
            obj_.original_tagname_ = 'cvList'
        elif nodeName_ == 'embeddedStylesheetList':
            obj_ = embeddedStylesheetListType.factory()
            obj_.build(child_)
            self.embeddedStylesheetList = obj_
            obj_.original_tagname_ = 'embeddedStylesheetList'
# end class qcMLType


class QualityAssessmentType(GeneratedsSuper):
    """The abstract base type for qualityParameter and attachment container"""
    subclass = None
    superclass = None
    def __init__(self, metaDataParameter=None, qualityParameter=None, attachment=None, extensiontype_=None):
        self.original_tagname_ = None
        if metaDataParameter is None:
            self.metaDataParameter = []
        else:
            self.metaDataParameter = metaDataParameter
        if qualityParameter is None:
            self.qualityParameter = []
        else:
            self.qualityParameter = qualityParameter
        if attachment is None:
            self.attachment = []
        else:
            self.attachment = attachment
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if QualityAssessmentType.subclass:
            return QualityAssessmentType.subclass(*args_, **kwargs_)
        else:
            return QualityAssessmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_metaDataParameter(self): return self.metaDataParameter
    def set_metaDataParameter(self, metaDataParameter): self.metaDataParameter = metaDataParameter
    def add_metaDataParameter(self, value): self.metaDataParameter.append(value)
    def insert_metaDataParameter_at(self, index, value): self.metaDataParameter.insert(index, value)
    def replace_metaDataParameter_at(self, index, value): self.metaDataParameter[index] = value
    def get_qualityParameter(self): return self.qualityParameter
    def set_qualityParameter(self, qualityParameter): self.qualityParameter = qualityParameter
    def add_qualityParameter(self, value): self.qualityParameter.append(value)
    def insert_qualityParameter_at(self, index, value): self.qualityParameter.insert(index, value)
    def replace_qualityParameter_at(self, index, value): self.qualityParameter[index] = value
    def get_attachment(self): return self.attachment
    def set_attachment(self, attachment): self.attachment = attachment
    def add_attachment(self, value): self.attachment.append(value)
    def insert_attachment_at(self, index, value): self.attachment.insert(index, value)
    def replace_attachment_at(self, index, value): self.attachment[index] = value
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.metaDataParameter or
            self.qualityParameter or
            self.attachment
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QualityAssessmentType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QualityAssessmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QualityAssessmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QualityAssessmentType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QualityAssessmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for metaDataParameter_ in self.metaDataParameter:
            metaDataParameter_.export(outfile, level, namespace_, name_='metaDataParameter', pretty_print=pretty_print)
        for qualityParameter_ in self.qualityParameter:
            qualityParameter_.export(outfile, level, namespace_, name_='qualityParameter', pretty_print=pretty_print)
        for attachment_ in self.attachment:
            attachment_.export(outfile, level, namespace_, name_='attachment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'metaDataParameter':
            obj_ = MetaDataType.factory()
            obj_.build(child_)
            self.metaDataParameter.append(obj_)
            obj_.original_tagname_ = 'metaDataParameter'
        elif nodeName_ == 'qualityParameter':
            obj_ = QualityParameterType.factory()
            obj_.build(child_)
            self.qualityParameter.append(obj_)
            obj_.original_tagname_ = 'qualityParameter'
        elif nodeName_ == 'attachment':
            obj_ = AttachmentType.factory()
            obj_.build(child_)
            self.attachment.append(obj_)
            obj_.original_tagname_ = 'attachment'
# end class QualityAssessmentType


class RunQualityAssessmentType(QualityAssessmentType):
    """The derived Type for QualityParameter container of a runA file
    unique identifier for this runQuality element"""
    subclass = None
    superclass = QualityAssessmentType
    def __init__(self, metaDataParameter=None, qualityParameter=None, attachment=None, ID=None):
        self.original_tagname_ = None
        super(RunQualityAssessmentType, self).__init__(metaDataParameter, qualityParameter, attachment, )
        self.ID = _cast(None, ID)
    def factory(*args_, **kwargs_):
        if RunQualityAssessmentType.subclass:
            return RunQualityAssessmentType.subclass(*args_, **kwargs_)
        else:
            return RunQualityAssessmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def hasContent_(self):
        if (
            super(RunQualityAssessmentType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RunQualityAssessmentType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RunQualityAssessmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RunQualityAssessmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RunQualityAssessmentType'):
        super(RunQualityAssessmentType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='RunQualityAssessmentType')
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            outfile.write(' ID=%s' % (self.gds_format_string(quote_attrib(self.ID).encode(ExternalEncoding), input_name='ID'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='RunQualityAssessmentType', fromsubclass_=False, pretty_print=True):
        super(RunQualityAssessmentType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            self.ID = value
        super(RunQualityAssessmentType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(RunQualityAssessmentType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class RunQualityAssessmentType


class SetQualityAssessmentType(QualityAssessmentType):
    """The derived Type for QualityParameter container of a SetA file
    unique identifier for this set element"""
    subclass = None
    superclass = QualityAssessmentType
    def __init__(self, metaDataParameter=None, qualityParameter=None, attachment=None, ID=None):
        self.original_tagname_ = None
        super(SetQualityAssessmentType, self).__init__(metaDataParameter, qualityParameter, attachment, )
        self.ID = _cast(None, ID)
    def factory(*args_, **kwargs_):
        if SetQualityAssessmentType.subclass:
            return SetQualityAssessmentType.subclass(*args_, **kwargs_)
        else:
            return SetQualityAssessmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def hasContent_(self):
        if (
            super(SetQualityAssessmentType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SetQualityAssessmentType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SetQualityAssessmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SetQualityAssessmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SetQualityAssessmentType'):
        super(SetQualityAssessmentType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='SetQualityAssessmentType')
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            outfile.write(' ID=%s' % (self.gds_format_string(quote_attrib(self.ID).encode(ExternalEncoding), input_name='ID'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SetQualityAssessmentType', fromsubclass_=False, pretty_print=True):
        super(SetQualityAssessmentType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            self.ID = value
        super(SetQualityAssessmentType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(SetQualityAssessmentType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class SetQualityAssessmentType


class AbstractParamType(GeneratedsSuper):
    """Abstract entity allowing either cvParam or userParam to be
    referenced in other schemas. The name of the cvTerm describing
    the parameterDescription of the parameter, containing
    information to allow the user interpreting the QC value.The
    user-entered value of the parameter, e.g. ppm value of accuracy
    or the file nameThe accession number identifying the unit within
    the OBO foundry Unit CVThe name of the unit corresponding to the
    valueIf a unit term is used, this attribute must refer to the
    corresponding CV 'id' attribute defined in the cvList in this
    file"""
    subclass = None
    superclass = None
    def __init__(self, name=None, unitName=None, value=None, unitAccession=None, unitCvRef=None, description=None, extensiontype_=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.unitName = _cast(None, unitName)
        self.value = _cast(None, value)
        self.unitAccession = _cast(None, unitAccession)
        self.unitCvRef = _cast(None, unitCvRef)
        self.description = _cast(None, description)
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if AbstractParamType.subclass:
            return AbstractParamType.subclass(*args_, **kwargs_)
        else:
            return AbstractParamType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_unitName(self): return self.unitName
    def set_unitName(self, unitName): self.unitName = unitName
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def get_unitAccession(self): return self.unitAccession
    def set_unitAccession(self, unitAccession): self.unitAccession = unitAccession
    def get_unitCvRef(self): return self.unitCvRef
    def set_unitCvRef(self, unitCvRef): self.unitCvRef = unitCvRef
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AbstractParamType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AbstractParamType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AbstractParamType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AbstractParamType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.unitName is not None and 'unitName' not in already_processed:
            already_processed.add('unitName')
            outfile.write(' unitName=%s' % (self.gds_format_string(quote_attrib(self.unitName).encode(ExternalEncoding), input_name='unitName'), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
        if self.unitAccession is not None and 'unitAccession' not in already_processed:
            already_processed.add('unitAccession')
            outfile.write(' unitAccession=%s' % (self.gds_format_string(quote_attrib(self.unitAccession).encode(ExternalEncoding), input_name='unitAccession'), ))
        if self.unitCvRef is not None and 'unitCvRef' not in already_processed:
            already_processed.add('unitCvRef')
            outfile.write(' unitCvRef=%s' % (self.gds_format_string(quote_attrib(self.unitCvRef).encode(ExternalEncoding), input_name='unitCvRef'), ))
        if self.description is not None and 'description' not in already_processed:
            already_processed.add('description')
            outfile.write(' description=%s' % (self.gds_format_string(quote_attrib(self.description).encode(ExternalEncoding), input_name='description'), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='AbstractParamType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('unitName', node)
        if value is not None and 'unitName' not in already_processed:
            already_processed.add('unitName')
            self.unitName = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
        value = find_attr_value_('unitAccession', node)
        if value is not None and 'unitAccession' not in already_processed:
            already_processed.add('unitAccession')
            self.unitAccession = value
        value = find_attr_value_('unitCvRef', node)
        if value is not None and 'unitCvRef' not in already_processed:
            already_processed.add('unitCvRef')
            self.unitCvRef = value
        value = find_attr_value_('description', node)
        if value is not None and 'description' not in already_processed:
            already_processed.add('description')
            self.description = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AbstractParamType


class CVParamType(AbstractParamType):
    """A single entry from an ontology or a controlled vocabulary.This
    attribute must refer to the corresponding CV 'id' attribute
    defined in the cvList in this fileThe accession number
    identifying the used cvTterm in the source CV"""
    subclass = None
    superclass = AbstractParamType
    def __init__(self, name=None, unitName=None, value=None, unitAccession=None, unitCvRef=None, description=None, cvRef=None, accession=None, extensiontype_=None):
        self.original_tagname_ = None
        super(CVParamType, self).__init__(name, unitName, value, unitAccession, unitCvRef, description, extensiontype_, )
        self.cvRef = _cast(None, cvRef)
        self.accession = _cast(None, accession)
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CVParamType.subclass:
            return CVParamType.subclass(*args_, **kwargs_)
        else:
            return CVParamType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cvRef(self): return self.cvRef
    def set_cvRef(self, cvRef): self.cvRef = cvRef
    def get_accession(self): return self.accession
    def set_accession(self, accession): self.accession = accession
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            super(CVParamType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CVParamType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CVParamType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CVParamType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CVParamType'):
        super(CVParamType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='CVParamType')
        if self.cvRef is not None and 'cvRef' not in already_processed:
            already_processed.add('cvRef')
            outfile.write(' cvRef=%s' % (self.gds_format_string(quote_attrib(self.cvRef).encode(ExternalEncoding), input_name='cvRef'), ))
        if self.accession is not None and 'accession' not in already_processed:
            already_processed.add('accession')
            outfile.write(' accession=%s' % (self.gds_format_string(quote_attrib(self.accession).encode(ExternalEncoding), input_name='accession'), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='CVParamType', fromsubclass_=False, pretty_print=True):
        super(CVParamType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('cvRef', node)
        if value is not None and 'cvRef' not in already_processed:
            already_processed.add('cvRef')
            self.cvRef = value
        value = find_attr_value_('accession', node)
        if value is not None and 'accession' not in already_processed:
            already_processed.add('accession')
            self.accession = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(CVParamType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(CVParamType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class CVParamType


class QualityParameterType(CVParamType):
    """A quality parameter contains a value and a cv, as well as a optional
    threshold elementA file unique identifier for this
    qualityParameter elementIndicates if this qualityParameter has
    passed a given threshold"""
    subclass = None
    superclass = CVParamType
    def __init__(self, name=None, unitName=None, value=None, unitAccession=None, unitCvRef=None, description=None, cvRef=None, accession=None, flag=None, ID=None, threshold=None):
        self.original_tagname_ = None
        super(QualityParameterType, self).__init__(name, unitName, value, unitAccession, unitCvRef, description, cvRef, accession, )
        self.flag = _cast(bool, flag)
        self.ID = _cast(None, ID)
        if threshold is None:
            self.threshold = []
        else:
            self.threshold = threshold
    def factory(*args_, **kwargs_):
        if QualityParameterType.subclass:
            return QualityParameterType.subclass(*args_, **kwargs_)
        else:
            return QualityParameterType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_threshold(self): return self.threshold
    def set_threshold(self, threshold): self.threshold = threshold
    def add_threshold(self, value): self.threshold.append(value)
    def insert_threshold_at(self, index, value): self.threshold.insert(index, value)
    def replace_threshold_at(self, index, value): self.threshold[index] = value
    def get_flag(self): return self.flag
    def set_flag(self, flag): self.flag = flag
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def hasContent_(self):
        if (
            self.threshold or
            super(QualityParameterType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QualityParameterType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QualityParameterType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QualityParameterType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QualityParameterType'):
        super(QualityParameterType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='QualityParameterType')
        if self.flag is not None and 'flag' not in already_processed:
            already_processed.add('flag')
            outfile.write(' flag="%s"' % self.gds_format_boolean(self.flag, input_name='flag'))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            outfile.write(' ID=%s' % (self.gds_format_string(quote_attrib(self.ID).encode(ExternalEncoding), input_name='ID'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='QualityParameterType', fromsubclass_=False, pretty_print=True):
        super(QualityParameterType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for threshold_ in self.threshold:
            threshold_.export(outfile, level, namespace_, name_='threshold', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('flag', node)
        if value is not None and 'flag' not in already_processed:
            already_processed.add('flag')
            if value in ('true', '1'):
                self.flag = True
            elif value in ('false', '0'):
                self.flag = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            self.ID = value
        super(QualityParameterType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'threshold':
            obj_ = thresholdType.factory()
            obj_.build(child_)
            self.threshold.append(obj_)
            obj_.original_tagname_ = 'threshold'
        super(QualityParameterType, self).buildChildren(child_, node, nodeName_, True)
# end class QualityParameterType


class AttachmentType(CVParamType):
    """A single attachment containing binary data or a table. The cvParam
    contains the description fitting to rhe referenced quality
    parameter. The MIME type is given in unit of the cv.A file
    unique identifier for this attachment elementThis attribute
    should refer to the qualityParameter this attachment belongs to
    (if any)"""
    subclass = None
    superclass = CVParamType
    def __init__(self, name=None, unitName=None, value=None, unitAccession=None, unitCvRef=None, description=None, cvRef=None, accession=None, qualityParameterRef=None, ID=None, binary=None, table=None):
        self.original_tagname_ = None
        super(AttachmentType, self).__init__(name, unitName, value, unitAccession, unitCvRef, description, cvRef, accession, )
        self.qualityParameterRef = _cast(None, qualityParameterRef)
        self.ID = _cast(None, ID)
        self.binary = binary
        self.table = table
    def factory(*args_, **kwargs_):
        if AttachmentType.subclass:
            return AttachmentType.subclass(*args_, **kwargs_)
        else:
            return AttachmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_binary(self): return self.binary
    def set_binary(self, binary): self.binary = binary
    def get_table(self): return self.table
    def set_table(self, table): self.table = table
    def get_qualityParameterRef(self): return self.qualityParameterRef
    def set_qualityParameterRef(self, qualityParameterRef): self.qualityParameterRef = qualityParameterRef
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def hasContent_(self):
        if (
            self.binary is not None or
            self.table is not None or
            super(AttachmentType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AttachmentType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttachmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AttachmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AttachmentType'):
        super(AttachmentType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AttachmentType')
        if self.qualityParameterRef is not None and 'qualityParameterRef' not in already_processed:
            already_processed.add('qualityParameterRef')
            outfile.write(' qualityParameterRef=%s' % (self.gds_format_string(quote_attrib(self.qualityParameterRef).encode(ExternalEncoding), input_name='qualityParameterRef'), ))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            outfile.write(' ID=%s' % (self.gds_format_string(quote_attrib(self.ID).encode(ExternalEncoding), input_name='ID'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AttachmentType', fromsubclass_=False, pretty_print=True):
        super(AttachmentType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.binary is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbinary>%s</%sbinary>%s' % (namespace_, self.gds_format_base64(self.binary, input_name='binary'), namespace_, eol_))
        if self.table is not None:
            self.table.export(outfile, level, namespace_, name_='table', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('qualityParameterRef', node)
        if value is not None and 'qualityParameterRef' not in already_processed:
            already_processed.add('qualityParameterRef')
            self.qualityParameterRef = value
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            self.ID = value
        super(AttachmentType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'binary':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'binary')
            else:
                bval_ = None
            self.binary = bval_
        elif nodeName_ == 'table':
            obj_ = TableType.factory()
            obj_.build(child_)
            self.table = obj_
            obj_.original_tagname_ = 'table'
        super(AttachmentType, self).buildChildren(child_, node, nodeName_, True)
# end class AttachmentType


class TableType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, tableColumnTypes=None, tableRowValues=None):
        self.original_tagname_ = None
        self.tableColumnTypes = tableColumnTypes
        self.validate_listOfStrings(self.tableColumnTypes)
        if tableRowValues is None:
            self.tableRowValues = []
        else:
            self.tableRowValues = tableRowValues
    def factory(*args_, **kwargs_):
        if TableType.subclass:
            return TableType.subclass(*args_, **kwargs_)
        else:
            return TableType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tableColumnTypes(self): return self.tableColumnTypes
    def set_tableColumnTypes(self, tableColumnTypes): self.tableColumnTypes = tableColumnTypes
    def get_tableRowValues(self): return self.tableRowValues
    def set_tableRowValues(self, tableRowValues): self.tableRowValues = tableRowValues
    def add_tableRowValues(self, value): self.tableRowValues.append(value)
    def insert_tableRowValues_at(self, index, value): self.tableRowValues.insert(index, value)
    def replace_tableRowValues_at(self, index, value): self.tableRowValues[index] = value
    def validate_listOfStrings(self, value):
        # Validate type listOfStrings, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.tableColumnTypes is not None or
            self.tableRowValues
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TableType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TableType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TableType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TableType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TableType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tableColumnTypes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stableColumnTypes>%s</%stableColumnTypes>%s' % (namespace_, self.gds_format_string(quote_xml(' '.join(self.tableColumnTypes)).encode(ExternalEncoding), input_name='tableColumnTypes'), namespace_, eol_))
        for tableRowValues_ in self.tableRowValues:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stableRowValues>%s</%stableRowValues>%s' % (namespace_, self.gds_format_string(quote_xml(tableRowValues_).encode(ExternalEncoding), input_name='tableRowValues'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tableColumnTypes':
            tableColumnTypes_ = child_.text
            self.tableColumnTypes = tableColumnTypes_
            # validate type listOfStrings
            self.validate_listOfStrings(self.tableColumnTypes)
        elif nodeName_ == 'tableRowValues':
            tableRowValues_ = child_.text
            self.tableRowValues.append(tableRowValues_)
            # validate type listOfStrings
            self.validate_listOfStrings(self.tableRowValues[-1])
# end class TableType


class CVListType(GeneratedsSuper):
    """The list of controlled vocabularies used in the file."""
    subclass = None
    superclass = None
    def __init__(self, cv=None):
        self.original_tagname_ = None
        if cv is None:
            self.cv = []
        else:
            self.cv = cv
    def factory(*args_, **kwargs_):
        if CVListType.subclass:
            return CVListType.subclass(*args_, **kwargs_)
        else:
            return CVListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cv(self): return self.cv
    def set_cv(self, cv): self.cv = cv
    def add_cv(self, value): self.cv.append(value)
    def insert_cv_at(self, index, value): self.cv.insert(index, value)
    def replace_cv_at(self, index, value): self.cv[index] = value
    def hasContent_(self):
        if (
            self.cv
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CVListType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CVListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CVListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CVListType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CVListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for cv_ in self.cv:
            cv_.export(outfile, level, namespace_, name_='cv', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cv':
            obj_ = CVType.factory()
            obj_.build(child_)
            self.cv.append(obj_)
            obj_.original_tagname_ = 'cv'
# end class CVListType


class CVType(GeneratedsSuper):
    """A source controlled vocabulary from which cvParams will be
    obtained.The full name of the CV.The version of the CV.The URI
    of the source CV.The unique identifier of this cv within the
    document to be referenced by cvParam elements."""
    subclass = None
    superclass = None
    def __init__(self, fullName=None, version=None, uri=None, ID=None):
        self.original_tagname_ = None
        self.fullName = _cast(None, fullName)
        self.version = _cast(None, version)
        self.uri = _cast(None, uri)
        self.ID = _cast(None, ID)
    def factory(*args_, **kwargs_):
        if CVType.subclass:
            return CVType.subclass(*args_, **kwargs_)
        else:
            return CVType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_fullName(self): return self.fullName
    def set_fullName(self, fullName): self.fullName = fullName
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_uri(self): return self.uri
    def set_uri(self, uri): self.uri = uri
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CVType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CVType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CVType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CVType'):
        if self.fullName is not None and 'fullName' not in already_processed:
            already_processed.add('fullName')
            outfile.write(' fullName=%s' % (self.gds_format_string(quote_attrib(self.fullName).encode(ExternalEncoding), input_name='fullName'), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        if self.uri is not None and 'uri' not in already_processed:
            already_processed.add('uri')
            outfile.write(' uri=%s' % (self.gds_format_string(quote_attrib(self.uri).encode(ExternalEncoding), input_name='uri'), ))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            outfile.write(' ID=%s' % (self.gds_format_string(quote_attrib(self.ID).encode(ExternalEncoding), input_name='ID'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CVType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('fullName', node)
        if value is not None and 'fullName' not in already_processed:
            already_processed.add('fullName')
            self.fullName = value
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
        value = find_attr_value_('uri', node)
        if value is not None and 'uri' not in already_processed:
            already_processed.add('uri')
            self.uri = value
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            self.ID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CVType


class embeddedStylesheetListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, anytypeobjs_=None):
        self.original_tagname_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if embeddedStylesheetListType.subclass:
            return embeddedStylesheetListType.subclass(*args_, **kwargs_)
        else:
            return embeddedStylesheetListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='embeddedStylesheetListType', namespacedef_='', pretty_print=True):
        # if pretty_print:
        #     eol_ = '\n'
        # else:
        #     eol_ = ''
        # if self.original_tagname_ is not None:
        #     name_ = self.original_tagname_
        # showIndent(outfile, level, pretty_print)
        # outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        # already_processed = set()
        # self.exportAttributes(outfile, level, already_processed, namespace_, name_='embeddedStylesheetListType')
        # if self.hasContent_():
        #     outfile.write('>%s' % (eol_, ))
        #     self.exportChildren(outfile, level + 1, namespace_='', name_='embeddedStylesheetListType', pretty_print=pretty_print)
        #     showIndent(outfile, level, pretty_print)
        #     outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        # else:
        #     outfile.write('/>%s' % (eol_, ))
        outfile.write('<embeddedStylesheetList>{}</embeddedStylesheetList>'.format(self.anytypeobjs_))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='embeddedStylesheetListType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='embeddedStylesheetListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        obj_ = self.gds_build_any(child_, 'embeddedStylesheetListType')
        if obj_ is not None:
            self.add_anytypeobjs_(obj_)
# end class embeddedStylesheetListType


class thresholdType(CVParamType):
    subclass = None
    superclass = CVParamType
    def __init__(self, name=None, unitName=None, value=None, unitAccession=None, unitCvRef=None, description=None, cvRef=None, accession=None, thresholdFilename=None):
        self.original_tagname_ = None
        super(thresholdType, self).__init__(name, unitName, value, unitAccession, unitCvRef, description, cvRef, accession, )
        self.thresholdFilename = _cast(None, thresholdFilename)
    def factory(*args_, **kwargs_):
        if thresholdType.subclass:
            return thresholdType.subclass(*args_, **kwargs_)
        else:
            return thresholdType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_thresholdFilename(self): return self.thresholdFilename
    def set_thresholdFilename(self, thresholdFilename): self.thresholdFilename = thresholdFilename
    def hasContent_(self):
        if (
            super(thresholdType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='thresholdType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='thresholdType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='thresholdType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='thresholdType'):
        super(thresholdType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='thresholdType')
        if self.thresholdFilename is not None and 'thresholdFilename' not in already_processed:
            already_processed.add('thresholdFilename')
            outfile.write(' thresholdFilename=%s' % (self.gds_format_string(quote_attrib(self.thresholdFilename).encode(ExternalEncoding), input_name='thresholdFilename'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='thresholdType', fromsubclass_=False, pretty_print=True):
        super(thresholdType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('thresholdFilename', node)
        if value is not None and 'thresholdFilename' not in already_processed:
            already_processed.add('thresholdFilename')
            self.thresholdFilename = value
        super(thresholdType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(thresholdType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class thresholdType


class MetaDataType(CVParamType):
    """A meta data annotation CV element.A file unique identifier for this
    meta data parameter"""
    subclass = None
    superclass = CVParamType
    def __init__(self, name=None, unitName=None, value=None, unitAccession=None, unitCvRef=None, description=None, cvRef=None, accession=None, ID=None):
        self.original_tagname_ = None
        super(MetaDataType, self).__init__(name, unitName, value, unitAccession, unitCvRef, description, cvRef, accession, )
        self.ID = _cast(None, ID)
    def factory(*args_, **kwargs_):
        if MetaDataType.subclass:
            return MetaDataType.subclass(*args_, **kwargs_)
        else:
            return MetaDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def hasContent_(self):
        if (
            super(MetaDataType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MetaDataType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MetaDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MetaDataType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MetaDataType'):
        super(MetaDataType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='MetaDataType')
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            outfile.write(' ID=%s' % (self.gds_format_string(quote_attrib(self.ID).encode(ExternalEncoding), input_name='ID'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='MetaDataType', fromsubclass_=False, pretty_print=True):
        super(MetaDataType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            self.ID = value
        super(MetaDataType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(MetaDataType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class MetaDataType


GDSClassesMapping = {
    'metaDataParameter': MetaDataType,
    'cvList': CVListType,
    'runQuality': RunQualityAssessmentType,
    'qualityParameter': QualityParameterType,
    'embeddedStylesheetList': embeddedStylesheetListType,
    'setQuality': SetQualityAssessmentType,
    'attachment': AttachmentType,
    'threshold': thresholdType,
    'table': TableType,
    'cv': CVType,
    'qcML': qcMLType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'qcML'
        rootClass = qcMLType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'qcML'
        rootClass = qcMLType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'qcML'
        rootClass = qcMLType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'qcML'
        rootClass = qcMLType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from qcml import *\n\n')
        sys.stdout.write('import qcml as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AbstractParamType",
    "AttachmentType",
    "CVListType",
    "CVParamType",
    "CVType",
    "MetaDataType",
    "QualityAssessmentType",
    "QualityParameterType",
    "RunQualityAssessmentType",
    "SetQualityAssessmentType",
    "TableType",
    "embeddedStylesheetListType",
    "qcMLType",
    "thresholdType"
]
